import { BigInt } from "@graphprotocol/graph-ts";
import { MintHashtag, HashtagProtocol } from "../generated/HashtagProtocol/HashtagProtocol";
import { ensurePublisher } from '../entities/Publisher';
import { ensureCreator } from '../entities/Creator';
import { ensureOwner } from '../entities/Owner';
import { Hashtag, Hashtag_v2 } from "../generated/schema";
import {
  toLowerCase,
  safeLoadOwner,
  safeLoadPlatform,
  safeLoadPublisher,
  ONE,
  safeLoadCreator,
} from "../utils/helpers";

/*
 * Track the minting of a hashtag
 *
 * event.params.tokenId NFT ID of the hashtag
 * event.params.hashtag Hashtag text
 * event.params.owner Owner of the new hashtag
 * event.params.publisher Publisher which facilitated the hashtag
 * event.params.publisherFee Fee earned by the publisher
 * event.params.platformFee Fee earned by the Hashtag Protocol
 *
 * Notes
 *  In addition to the data generated by a hashtag, further data points are generated:
 *   - Count of how many hashtags owned by an Ethereum address
 *   - Fees earned by the platform and publishers across all minting events
 */
export function handleMintHashtag(event: MintHashtag): void {
  let hashtagEntity = new Hashtag(event.params.tokenId.toString());
  let hashtagContract = HashtagProtocol.bind(event.address);
  let hashtag = hashtagContract.tokenIdToHashtag(event.params.tokenId);

  hashtagEntity.name = hashtag.value2;
  hashtagEntity.displayHashtag = event.params.displayHashtag;

  let displayHashtag: string = event.params.displayHashtag;
  let lowerHashtag: string = toLowerCase(displayHashtag);

  hashtagEntity.hashtag = lowerHashtag;
  hashtagEntity.hashtagWithoutHash = lowerHashtag.substring(1, lowerHashtag.length);

  hashtagEntity.owner = hashtagContract.platform();
  hashtagEntity.creator = hashtag.value1;
  hashtagEntity.timestamp = event.block.timestamp;
  hashtagEntity.tagCount = BigInt.fromI32(0);
  hashtagEntity.publisher = event.params.publisher;
  hashtagEntity.ownerRevenue = BigInt.fromI32(0);
  hashtagEntity.publisherRevenue = BigInt.fromI32(0);
  hashtagEntity.protocolRevenue = BigInt.fromI32(0);
  hashtagEntity.creatorRevenue = BigInt.fromI32(0);
  hashtagEntity.save();
  

  let owner = safeLoadOwner(event.params.creator.toHexString());
  owner.mintCount = owner.mintCount.plus(ONE);
  owner.save();

  // publisher
  let publisher = safeLoadPublisher(event.params.publisher.toHexString());
  publisher.mintCount = publisher.mintCount.plus(ONE);
  publisher.save();
  
  


  // platform
  let platform = safeLoadPlatform("platform");
  platform.save();

  // creator
  let creator = safeLoadCreator(hashtag.value1.toHexString());
  creator.mintCount = creator.mintCount.plus(ONE);
  creator.save();

  ////////////////////////////////////////////////////////////
  //Version 2
  ////////////////////////////////////////////////////////////
  let hashtagEntity_v2 = new Hashtag_v2(event.params.tokenId.toString());
  let hashtagContract_v2 = HashtagProtocol.bind(event.address);
  let hashtag_v2 = hashtagContract_v2.tokenIdToHashtag(event.params.tokenId);

  hashtagEntity_v2.name = hashtag_v2.value2;
  hashtagEntity_v2.displayHashtag = event.params.displayHashtag;

  let displayHashtag_v2: string = event.params.displayHashtag;
  let lowerHashtag_v2: string = toLowerCase(displayHashtag_v2);

  hashtagEntity_v2.hashtag = lowerHashtag_v2;
  hashtagEntity_v2.hashtagWithoutHash = lowerHashtag_v2.substring(1, lowerHashtag_v2.length);
  hashtagEntity_v2.timestamp = event.block.timestamp;
  hashtagEntity_v2.tagCount = BigInt.fromI32(0);
  hashtagEntity_v2.ownerRevenue = BigInt.fromI32(0);
  hashtagEntity_v2.publisherRevenue = BigInt.fromI32(0);
  hashtagEntity_v2.protocolRevenue = BigInt.fromI32(0);
  hashtagEntity_v2.creatorRevenue = BigInt.fromI32(0);

  

  let owner_v2 = ensureOwner(event.params.creator.toHexString());
  owner_v2.mintCount = owner_v2.mintCount.plus(ONE);
  owner_v2.save();
  hashtagEntity_v2.owner = owner_v2.id;

  // publisher
  let publisher_v2 = ensurePublisher(event.params.publisher.toHexString());
  publisher_v2.mintCount = publisher_v2.mintCount.plus(ONE);
  publisher_v2.save();
  hashtagEntity_v2.publisher = publisher_v2.id;
 
  
  


  // platform
  let platform_v2 = safeLoadPlatform("platform");
  platform_v2.save();

  // creator
  let creator_v2 = ensureCreator(hashtag.value1.toHexString());
  creator_v2.mintCount = creator_v2.mintCount.plus(ONE);
  creator_v2.save();
  hashtagEntity_v2.creator = creator_v2.id;


  hashtagEntity_v2.save();

}
